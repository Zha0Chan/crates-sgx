var ALIASES = {};
ALIASES["adler32"] = {};
ALIASES["anyhow"] = {};
ALIASES["cfg_if"] = {};
ALIASES["crates_sgx_example"] = {};
ALIASES["fnv"] = {};
ALIASES["hashbrown"] = {};
ALIASES["hex"] = {};
ALIASES["itoa"] = {};
ALIASES["proc_macro2"] = {};
ALIASES["quote"] = {};
ALIASES["serde"] = {};
ALIASES["serde_derive"] = {};
ALIASES["sgx_alloc"] = {};
ALIASES["sgx_backtrace_sys"] = {};
ALIASES["sgx_demangle"] = {};
ALIASES["sgx_libc"] = {};
ALIASES["sgx_tprotected_fs"] = {};
ALIASES["sgx_trts"] = {};
ALIASES["sgx_tstd"] = {"-=":[{'crate':'sgx_tstd','ty':8,'name':'SubAssign','desc':'The subtraction assignment operator `-=`.','p':'sgx_tstd::ops'}],"]":[{'crate':'sgx_tstd','ty':8,'name':'Index','desc':'Used for indexing operations (`container[index]`) in…','p':'sgx_tstd::ops'},{'crate':'sgx_tstd','ty':8,'name':'IndexMut','desc':'Used for indexing operations (`container[index]`) in…','p':'sgx_tstd::ops'}],"{:?}":[{'crate':'sgx_tstd','ty':8,'name':'Debug','desc':'`?` formatting.','p':'sgx_tstd::fmt'}],"*":[{'crate':'sgx_tstd','ty':8,'name':'Mul','desc':'The multiplication operator `*`.','p':'sgx_tstd::ops'},{'crate':'sgx_tstd','ty':8,'name':'MulAssign','desc':'The multiplication assignment operator `*=`.','p':'sgx_tstd::ops'},{'crate':'sgx_tstd','ty':8,'name':'Deref','desc':'Used for immutable dereferencing operations, like `*v`.','p':'sgx_tstd::ops'},{'crate':'sgx_tstd','ty':8,'name':'DerefMut','desc':'Used for mutable dereferencing operations, like in `*v =…','p':'sgx_tstd::ops'}],">=":[{'crate':'sgx_tstd','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'sgx_tstd::cmp'},{'crate':'sgx_tstd','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'sgx_tstd::cmp'}],"..=":[{'crate':'sgx_tstd','ty':3,'name':'RangeInclusive','desc':'A range bounded inclusively below and above (`start..=end`).','p':'sgx_tstd::ops'},{'crate':'sgx_tstd','ty':3,'name':'RangeToInclusive','desc':'A range only bounded inclusively above (`..=end`).','p':'sgx_tstd::ops'}],"^=":[{'crate':'sgx_tstd','ty':8,'name':'BitXorAssign','desc':'The bitwise XOR assignment operator `^=`.','p':'sgx_tstd::ops'}],">":[{'crate':'sgx_tstd','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'sgx_tstd::cmp'},{'crate':'sgx_tstd','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'sgx_tstd::cmp'}],"<=":[{'crate':'sgx_tstd','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'sgx_tstd::cmp'},{'crate':'sgx_tstd','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'sgx_tstd::cmp'}],"^":[{'crate':'sgx_tstd','ty':8,'name':'BitXor','desc':'The bitwise XOR operator `^`.','p':'sgx_tstd::ops'}],"&=":[{'crate':'sgx_tstd','ty':8,'name':'BitAndAssign','desc':'The bitwise AND assignment operator `&=`.','p':'sgx_tstd::ops'}],"[]":[{'crate':'sgx_tstd','ty':8,'name':'Index','desc':'Used for indexing operations (`container[index]`) in…','p':'sgx_tstd::ops'},{'crate':'sgx_tstd','ty':8,'name':'IndexMut','desc':'Used for indexing operations (`container[index]`) in…','p':'sgx_tstd::ops'}],"+":[{'crate':'sgx_tstd','ty':8,'name':'Add','desc':'The addition operator `+`.','p':'sgx_tstd::ops'},{'crate':'sgx_tstd','ty':8,'name':'AddAssign','desc':'The addition assignment operator `+=`.','p':'sgx_tstd::ops'}],"%":[{'crate':'sgx_tstd','ty':8,'name':'Rem','desc':'The remainder operator `%`.','p':'sgx_tstd::ops'},{'crate':'sgx_tstd','ty':8,'name':'RemAssign','desc':'The remainder assignment operator `%=`.','p':'sgx_tstd::ops'}],">>=":[{'crate':'sgx_tstd','ty':8,'name':'ShrAssign','desc':'The right shift assignment operator `>>=`.','p':'sgx_tstd::ops'}],"/":[{'crate':'sgx_tstd','ty':8,'name':'Div','desc':'The division operator `/`.','p':'sgx_tstd::ops'},{'crate':'sgx_tstd','ty':8,'name':'DivAssign','desc':'The division assignment operator `/=`.','p':'sgx_tstd::ops'}],"[":[{'crate':'sgx_tstd','ty':8,'name':'Index','desc':'Used for indexing operations (`container[index]`) in…','p':'sgx_tstd::ops'},{'crate':'sgx_tstd','ty':8,'name':'IndexMut','desc':'Used for indexing operations (`container[index]`) in…','p':'sgx_tstd::ops'}],"..":[{'crate':'sgx_tstd','ty':3,'name':'Range','desc':'A (half-open) range bounded inclusively below and…','p':'sgx_tstd::ops'},{'crate':'sgx_tstd','ty':3,'name':'RangeFrom','desc':'A range only bounded inclusively below (`start..`).','p':'sgx_tstd::ops'},{'crate':'sgx_tstd','ty':3,'name':'RangeFull','desc':'An unbounded range (`..`).','p':'sgx_tstd::ops'},{'crate':'sgx_tstd','ty':3,'name':'RangeTo','desc':'A range only bounded exclusively above (`..end`).','p':'sgx_tstd::ops'}],"<<":[{'crate':'sgx_tstd','ty':8,'name':'Shl','desc':'The left shift operator `<<`. Note that because this trait…','p':'sgx_tstd::ops'}],"{}":[{'crate':'sgx_tstd','ty':8,'name':'Display','desc':'Format trait for an empty format, `{}`.','p':'sgx_tstd::fmt'}],"<":[{'crate':'sgx_tstd','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'sgx_tstd::cmp'},{'crate':'sgx_tstd','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'sgx_tstd::cmp'}],"*=":[{'crate':'sgx_tstd','ty':8,'name':'MulAssign','desc':'The multiplication assignment operator `*=`.','p':'sgx_tstd::ops'}],"&":[{'crate':'sgx_tstd','ty':8,'name':'BitAnd','desc':'The bitwise AND operator `&`.','p':'sgx_tstd::ops'}],"|=":[{'crate':'sgx_tstd','ty':8,'name':'BitOrAssign','desc':'The bitwise OR assignment operator `|=`.','p':'sgx_tstd::ops'}],"|":[{'crate':'sgx_tstd','ty':8,'name':'BitOr','desc':'The bitwise OR operator `|`.','p':'sgx_tstd::ops'}],"&*":[{'crate':'sgx_tstd','ty':8,'name':'Deref','desc':'Used for immutable dereferencing operations, like `*v`.','p':'sgx_tstd::ops'}],">>":[{'crate':'sgx_tstd','ty':8,'name':'Shr','desc':'The right shift operator `>>`. Note that because this…','p':'sgx_tstd::ops'}],"?":[{'crate':'sgx_tstd','ty':14,'name':'try','desc':'Unwraps a result or propagates its error.','p':'sgx_tstd'},{'crate':'sgx_tstd','ty':8,'name':'Try','desc':'A trait for customizing the behavior of the `?` operator.','p':'sgx_tstd::ops'}],"==":[{'crate':'sgx_tstd','ty':8,'name':'PartialEq','desc':'Trait for equality comparisons which are partial…','p':'sgx_tstd::cmp'},{'crate':'sgx_tstd','ty':8,'name':'Eq','desc':'Trait for equality comparisons which are equivalence…','p':'sgx_tstd::cmp'}],"!=":[{'crate':'sgx_tstd','ty':8,'name':'PartialEq','desc':'Trait for equality comparisons which are partial…','p':'sgx_tstd::cmp'},{'crate':'sgx_tstd','ty':8,'name':'Eq','desc':'Trait for equality comparisons which are equivalence…','p':'sgx_tstd::cmp'}],"memcpy":[{'crate':'sgx_tstd','ty':5,'name':'copy_nonoverlapping','desc':'Copies `count * size_of::<T>()` bytes from `src` to `dst`.…','p':'sgx_tstd::intrinsics'},{'crate':'sgx_tstd','ty':5,'name':'copy_nonoverlapping','desc':'Copies `count * size_of::<T>()` bytes from `src` to `dst`.…','p':'sgx_tstd::ptr'}],"memmove":[{'crate':'sgx_tstd','ty':5,'name':'copy','desc':'Copies `count * size_of::<T>()` bytes from `src` to `dst`.…','p':'sgx_tstd::intrinsics'},{'crate':'sgx_tstd','ty':5,'name':'copy','desc':'Copies `count * size_of::<T>()` bytes from `src` to `dst`.…','p':'sgx_tstd::ptr'}],"<<=":[{'crate':'sgx_tstd','ty':8,'name':'ShlAssign','desc':'The left shift assignment operator `<<=`.','p':'sgx_tstd::ops'}],"-":[{'crate':'sgx_tstd','ty':8,'name':'Neg','desc':'The unary negation operator `-`.','p':'sgx_tstd::ops'},{'crate':'sgx_tstd','ty':8,'name':'Sub','desc':'The subtraction operator `-`.','p':'sgx_tstd::ops'},{'crate':'sgx_tstd','ty':8,'name':'SubAssign','desc':'The subtraction assignment operator `-=`.','p':'sgx_tstd::ops'}],"+=":[{'crate':'sgx_tstd','ty':8,'name':'AddAssign','desc':'The addition assignment operator `+=`.','p':'sgx_tstd::ops'}],"/=":[{'crate':'sgx_tstd','ty':8,'name':'DivAssign','desc':'The division assignment operator `/=`.','p':'sgx_tstd::ops'}],"%=":[{'crate':'sgx_tstd','ty':8,'name':'RemAssign','desc':'The remainder assignment operator `%=`.','p':'sgx_tstd::ops'}],};
ALIASES["sgx_types"] = {};
ALIASES["sgx_unwind"] = {};
ALIASES["syn"] = {};
ALIASES["thiserror"] = {};
ALIASES["thiserror_impl"] = {};
ALIASES["unicode_xid"] = {};
